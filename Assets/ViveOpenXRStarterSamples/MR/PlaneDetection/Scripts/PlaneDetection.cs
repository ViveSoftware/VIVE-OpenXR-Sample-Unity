// Copyright HTC Corporation All Rights Reserved.

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.XR;
using VIVE.OpenXR;
#if DEFINE_VIVE_OPENXR
using VIVE.OpenXR.PlaneDetection;
using VIVE.OpenXR.Toolkits.PlaneDetection;
#endif

namespace VIVE.OpenXR.StarterSample.PlaneDetection
{
    public class PlaneDetection : MonoBehaviour
    {

        float time = 0;
        List<GameObject> existPlanes = new List<GameObject>();
        [SerializeField, Tooltip("Used on mesh generated by extent")]
        private Material extentMat;
        [SerializeField, Tooltip("Used on mesh generated by vertices")]
        private Material planeMat;

        void Start()
        {
            OnDetectPlane();
        }

        public void OnDetectPlane()
        {
            Debug.Log("OnDetectPlane()");
            StartCoroutine(GetAllPlanes());
        }


        public IEnumerator GetAllPlanes()
        {
#if DEFINE_VIVE_OPENXR
            if (!PlaneDetectionManager.IsSupported())
            {
                yield break;
            }

            var pd = PlaneDetectionManager.CreatePlaneDetector();
            if (pd == null)
            {
                yield break;
            }

            pd.BeginPlaneDetection();
            yield return null;

            var state = pd.GetPlaneDetectionState();
            bool isDone = false;
            time = 0;
            while (isDone)
            {
                switch (state)
                {
                    case VivePlaneDetection.XrPlaneDetectionStateEXT.DONE_EXT:
                        Debug.Log("GetAllPlanes() state: " + state);
                        isDone = true;
                        break;
                    case VivePlaneDetection.XrPlaneDetectionStateEXT.PENDING_EXT:
                        if (time + 0.5f > Time.unscaledTime)
                        {
                            time = Time.unscaledTime;
                            Debug.Log("GetAllPlanes() state: " + state);
                        }
                        yield return null;
                        continue;
                    case VivePlaneDetection.XrPlaneDetectionStateEXT.NONE_EXT:
                    case VivePlaneDetection.XrPlaneDetectionStateEXT.FATAL_EXT:
                    case VivePlaneDetection.XrPlaneDetectionStateEXT.ERROR_EXT:
                        Debug.Log("GetAllPlanes() state: " + state);
                        PlaneDetectionManager.DestroyPlaneDetector(pd);
                        yield break;
                }
                yield return null;
                state = pd.GetPlaneDetectionState();
            }

            List<PlaneDetectorLocation> locations;
            if (pd.GetPlaneDetections(out locations) != XrResult.XR_SUCCESS)
            {
                yield break;
            }
            foreach (var location in locations)
            {
                var plane = pd.GetPlane(location.planeId);
                var obj = CreatePlane(location, plane, extentMat, planeMat);
                existPlanes.Add(obj);

            }

            PlaneDetectionManager.DestroyPlaneDetector(pd);
#endif
            yield return null;
        }
#if DEFINE_VIVE_OPENXR
        static GameObject CreatePlane(PlaneDetectorLocation location, VIVE.OpenXR.Toolkits.PlaneDetection.Plane plane, Material extentMat, Material planeMat)
        {
            GameObject objRoot = new GameObject("Plane" + location.planeId);
            objRoot.transform.localPosition = location.pose.position;
            objRoot.transform.localRotation = location.pose.rotation;
            GameObject obj = new GameObject("BySize");
            obj.transform.SetParent(objRoot.transform, false);
            obj.AddComponent<MeshFilter>().mesh = CreatePlane(location.size);
            obj.AddComponent<MeshRenderer>().material = extentMat;

            obj = new GameObject("ByPlane");
            obj.transform.SetParent(objRoot.transform, false);
            obj.AddComponent<MeshFilter>().mesh = CreatePlane(plane);
            obj.AddComponent<MeshRenderer>().material = planeMat;
            return objRoot;
        }
        static Mesh CreatePlane(VIVE.OpenXR.Toolkits.PlaneDetection.Plane plane)
        {
            Mesh mesh = new Mesh();
            mesh.name = "PlaneMesh";
            mesh.vertices = plane.verticesGenerated;
            mesh.triangles = plane.indicesGenerated;
            mesh.uv = plane.uvsGenerated;
            mesh.RecalculateNormals();
            mesh.RecalculateTangents();
            mesh.RecalculateBounds();

            return mesh;
        }
#endif
        static Mesh CreatePlane(Vector3 size)
        {
            Mesh mesh = new Mesh();
            mesh.name = "PlaneMesh";
            var vertices = new Vector3[4];
            float hx = size.x / 2;
            float hy = size.y / 2;
            //  3---2
            //  | \ |   // This plane is facing +Z.
            //  1---0
            vertices[0] = new Vector3(-hx, -hy, 0);
            vertices[1] = new Vector3(hx, -hy, 0);
            vertices[2] = new Vector3(-hx, hy, 0);
            vertices[3] = new Vector3(hx, hy, 0);
            mesh.vertices = vertices;
            mesh.triangles = new int[] { 0, 3, 2, 0, 1, 3 };
            mesh.uv = new Vector2[] { new Vector2(0, 0), new Vector2(1, 0), new Vector2(0, 1), new Vector2(1, 1), };
            mesh.RecalculateNormals();
            mesh.RecalculateTangents();
            mesh.RecalculateBounds();

            return mesh;
        }

    }
}
